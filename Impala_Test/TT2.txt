import java.io.File;
import java.security.PrivilegedExceptionAction;
import javax.security.auth.Subject;
import javax.security.auth.login.LoginContext;
import javax.security.auth.login.LoginException;
import org.apache.hadoop.security.UserGroupInformation;

public class KerberosAuthenticator {

  public static void main(String[] args) throws Exception {
    String principal = "user@EXAMPLE.COM";
    String keytabPath = "/path/to/user.keytab";

    // Set Kerberos properties
    System.setProperty("java.security.krb5.conf", "/etc/krb5.conf");
    System.setProperty("sun.security.krb5.debug", "true");

    // Create a Kerberos configuration
    javax.security.auth.login.Configuration kerberosConfig =
        new javax.security.auth.login.Configuration() {
          @Override
          public AppConfigurationEntry[] getAppConfigurationEntry(String name) {
            Map<String, String> options = new HashMap<>();
            options.put("keyTab", keytabPath);
            options.put("principal", principal);
            options.put("useKeyTab", "true");
            options.put("storeKey", "true");
            options.put("doNotPrompt", "true");
            options.put("debug", "true");
            options.put("refreshKrb5Config", "true");
            options.put("isInitiator", "true");
            options.put("renewTGT", "true");
            String ticketCachePath = System.getenv("KRB5CCNAME");
            if (ticketCachePath != null) {
              options.put("ticketCache", ticketCachePath);
            }
            return new AppConfigurationEntry[] {
              new AppConfigurationEntry(
                  "com.sun.security.auth.module.Krb5LoginModule",
                  AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,
                  options)
            };
          }
        };

    // Create a login context and authenticate with Kerberos
    LoginContext loginContext =
        new LoginContext("KerberosLogin", null, null, kerberosConfig);
    loginContext.login();
    Subject subject = loginContext.getSubject();

    // Use the authenticated subject to run code as the authenticated user
    Subject.doAs(
        subject,
        (PrivilegedExceptionAction<Void>)
            () -> {
              // Code to run as authenticated user
              return null;
            });

    // Logout the authenticated user
    loginContext.logout();
  }

}
